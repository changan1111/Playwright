import * as dotenv from 'dotenv';

dotenv.config(); // Loads environment variables from a .env file

type BucketData = {
  bucket2: number;
  bucket7: number;
  bucket6: number;
  bucket3: number;
};

class BucketReleaseAutomation {
  buckets: BucketData;
  totalReleased: number;
  dailyCap: number;
  dayRelease: number;

  constructor(buckets: BucketData, dailyCap: number) {
    this.buckets = buckets;
    this.totalReleased = 0;
    this.dailyCap = dailyCap;
    this.dayRelease = 0;
  }

  releaseOnDay(day: number): void {
    let dailyRelease = 0;
    let priorityBuckets = [
      { name: 'bucket2', amount: this.buckets.bucket2, released: 0 },
      { name: 'bucket7', amount: this.buckets.bucket7, released: 0 },
      { name: 'bucket6', amount: this.buckets.bucket6, released: 0 },
      { name: 'bucket3', amount: this.buckets.bucket3, released: 0 }
    ];

    // Step 1: Prioritize Bucket 2, Bucket 7
    priorityBuckets.sort((a, b) => {
      const priorityOrder = ['bucket2', 'bucket7', 'bucket6', 'bucket3'];
      return priorityOrder.indexOf(a.name) - priorityOrder.indexOf(b.name);
    });

    // Step 2: Handle release for Day 1 and Day 2 with cap checking
    if (day === 1 || day === 2) {
      priorityBuckets.forEach((bucket) => {
        // Handle Bucket 2 and Bucket 7
        if (dailyRelease < this.dailyCap) {
          const maxRelease = this.dailyCap - dailyRelease;
          const releaseAmount = Math.min(maxRelease, bucket.amount - bucket.released);
          bucket.released += releaseAmount;
          dailyRelease += releaseAmount;
          this.totalReleased += releaseAmount;
        }
      });

      // Step 3: Handle Bucket 6 and Bucket 3 (only up to 300 in total)
      if (dailyRelease < this.dailyCap) {
        let remainingCap = this.dailyCap - dailyRelease;
        priorityBuckets.forEach((bucket) => {
          if (['bucket6', 'bucket3'].includes(bucket.name) && remainingCap > 0) {
            const releaseAmount = Math.min(remainingCap, 300 - bucket.released);
            bucket.released += releaseAmount;
            dailyRelease += releaseAmount;
            remainingCap -= releaseAmount;
          }
        });
      }
    }

    // Step 4: Handle the excess for Day 5 or later
    if (day === 5) {
      priorityBuckets.forEach((bucket) => {
        // Release remaining amounts from Bucket 6 and Bucket 3
        if (bucket.released < bucket.amount) {
          const releaseAmount = bucket.amount - bucket.released;
          bucket.released += releaseAmount;
          this.totalReleased += releaseAmount;
        }
      });
    }

    console.log(`Total Released on Day ${day}:`, dailyRelease);
    console.log(`Total Released So Far:`, this.totalReleased);
  }
}

// Get the daily cap value from the environment variable (fallback to 6000 if not set)
const dailyCap = process.env.DAILY_CAP ? parseInt(process.env.DAILY_CAP, 10) : 6000;

// Example bucket data passed as an object
const buckets: BucketData = {
  bucket2: 4000,
  bucket7: 501,
  bucket6: 2000,
  bucket3: 1000
};

const bucketRelease = new BucketReleaseAutomation(buckets, dailyCap);

// Simulate the release for different days
bucketRelease.releaseOnDay(1); // Day 1
bucketRelease.releaseOnDay(2); // Day 2
bucketRelease.releaseOnDay(5); // Day 5 (to handle remaining Bucket 6)
