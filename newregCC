interface BucketData {
  bucket2: number;
  bucket7: number;
  bucket6: number;
  bucket3: number;
}

class BucketRelease {
  private maxReleasePerDay: number = 6000;
  private releaseSchedule: { [key: string]: number } = {
    day1: 0,
    day2: 0,
    day5: 0,
    day7: 0,
  };
  
  constructor(private buckets: BucketData) {}

  // Method to calculate release for each day
  public releaseBuckets() {
    // Day 1: Handle Bucket 2 and Bucket 7
    let day1Release = 0;
    if (this.buckets.bucket2 > 0) {
      const releaseFromBucket2 = Math.min(this.buckets.bucket2, this.maxReleasePerDay);
      this.buckets.bucket2 -= releaseFromBucket2;
      day1Release += releaseFromBucket2;
    }

    let remaining = this.maxReleasePerDay - day1Release;

    if (remaining > 0 && this.buckets.bucket7 > 0) {
      const releaseFromBucket7 = Math.min(this.buckets.bucket7, remaining);
      this.buckets.bucket7 -= releaseFromBucket7;
      day1Release += releaseFromBucket7;
    }

    this.releaseSchedule.day1 = day1Release;
    const day1Remaining = this.maxReleasePerDay - day1Release;

    // Day 2: Release remaining amounts
    if (day1Remaining > 0) {
      if (this.buckets.bucket7 > 0) {
        const releaseFromBucket7 = Math.min(this.buckets.bucket7, day1Remaining);
        this.buckets.bucket7 -= releaseFromBucket7;
        this.releaseSchedule.day2 = releaseFromBucket7;
      }
    }

    // Day 5: Handle remaining release from Bucket 6 and Bucket 3
    let day5Release = 0;
    if (this.buckets.bucket6 > 0) {
      const releaseFromBucket6 = Math.min(this.buckets.bucket6, this.buckets.bucket6);
      this.buckets.bucket6 -= releaseFromBucket6;
      day5Release += releaseFromBucket6;
    }

    if (this.buckets.bucket3 > 0) {
      const releaseFromBucket3 = Math.min(this.buckets.bucket3, this.buckets.bucket3);
      this.buckets.bucket3 -= releaseFromBucket3;
      day5Release += releaseFromBucket3;
    }

    this.releaseSchedule.day5 = day5Release;

    // Day 7: Handle the remaining release from Bucket 2
    let day7Release = 0;
    if (this.buckets.bucket2 > 0) {
      const releaseFromBucket2 = Math.min(this.buckets.bucket2, this.buckets.bucket2);
      this.buckets.bucket2 -= releaseFromBucket2;
      day7Release += releaseFromBucket2;
    }

    this.releaseSchedule.day7 = day7Release;

    // Final bucket status
    return {
      releaseSchedule: this.releaseSchedule,
      remainingBuckets: this.buckets,
    };
  }
}

// Example Usage
const buckets: BucketData = {
  bucket2: 6001,
  bucket7: 6001,
  bucket6: 6001,
  bucket3: 1000,
};

const bucketRelease = new BucketRelease(buckets);
const result = bucketRelease.releaseBuckets();

console.log("Day 1 Release: ", result.releaseSchedule.day1);
console.log("Day 2 Release: ", result.releaseSchedule.day2);
console.log("Day 5 Release: ", result.releaseSchedule.day5);
console.log("Day 7 Release: ", result.releaseSchedule.day7);
console.log("Remaining Buckets: ", result.remainingBuckets);
