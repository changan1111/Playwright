interface BucketData {
  bucket2: number;
  bucket7: number;
  bucket6: number;
  bucket3: number;
}

const MAX_RELEASE = process.env.MAX_RELEASE || 6000; // Total max release limit (can be set via environment variable)

const releaseBuckets = (buckets: BucketData) => {
  let totalReleasedDay1 = 0;
  let totalReleasedDay2 = 0;
  let totalReleasedDay5 = 0;

  // Track the remaining amounts for Bucket 2, 7, 6, and 3
  let remainingBucket2 = buckets.bucket2;
  let remainingBucket7 = buckets.bucket7;
  let remainingBucket6 = buckets.bucket6;
  let remainingBucket3 = buckets.bucket3;

  // Initialize the output for each bucket
  const output = {
    bucket2: 0,
    bucket7: 0,
    bucket6: 0,
    bucket3: 0,
  };

  // DAY 1 (maximum release = 6000)
  // Release from Bucket 2, Bucket 7, and Bucket 6 in priority
  let day1Release = 0;

  // Priority: Bucket 2 -> Bucket 7 -> Bucket 6 -> Bucket 3

  // Release from Bucket 2
  if (remainingBucket2 > 0 && day1Release < MAX_RELEASE) {
    const releaseBucket2 = Math.min(remainingBucket2, MAX_RELEASE - day1Release);
    output.bucket2 = releaseBucket2;
    day1Release += releaseBucket2;
    remainingBucket2 -= releaseBucket2;
  }

  // Release from Bucket 7
  if (remainingBucket7 > 0 && day1Release < MAX_RELEASE) {
    const releaseBucket7 = Math.min(remainingBucket7, MAX_RELEASE - day1Release);
    output.bucket7 = releaseBucket7;
    day1Release += releaseBucket7;
    remainingBucket7 -= releaseBucket7;
  }

  // Release from Bucket 6 (only if needed to reach 6000)
  if (remainingBucket6 > 0 && day1Release < MAX_RELEASE) {
    const releaseBucket6 = Math.min(remainingBucket6, MAX_RELEASE - day1Release);
    output.bucket6 = releaseBucket6;
    day1Release += releaseBucket6;
    remainingBucket6 -= releaseBucket6;
  }

  // DAY 2
  // Release only from Bucket 6 and Bucket 3 if needed
  let day2Release = 0;

  if (day1Release < MAX_RELEASE) {
    // Release from Bucket 6 (if it wasn't fully released on Day 1)
    if (remainingBucket6 > 0 && day1Release < MAX_RELEASE) {
      const releaseBucket6Day2 = Math.min(remainingBucket6, MAX_RELEASE - day1Release);
      output.bucket6 += releaseBucket6Day2;
      day2Release += releaseBucket6Day2;
      remainingBucket6 -= releaseBucket6Day2;
    }
  }

  // Release from Bucket 3 (if it wasn't fully released on Day 1)
  if (remainingBucket3 > 0 && day2Release < MAX_RELEASE) {
    const releaseBucket3 = Math.min(remainingBucket3, MAX_RELEASE - day2Release);
    output.bucket3 = releaseBucket3;
    day2Release += releaseBucket3;
    remainingBucket3 -= releaseBucket3;
  }

  // DAY 5 (remaining release)
  // Any remaining amounts go to Day 5
  let day5Release = 0;

  // Release from remaining Bucket 6 and Bucket 3
  if (remainingBucket6 > 0) {
    output.bucket6 += remainingBucket6;
    day5Release += remainingBucket6;
    remainingBucket6 = 0;
  }

  if (remainingBucket3 > 0) {
    output.bucket3 += remainingBucket3;
    day5Release += remainingBucket3;
    remainingBucket3 = 0;
  }

  return {
    day1: output.bucket2 + output.bucket7 + output.bucket6,  // Total released on Day 1
    day2: output.bucket6 + output.bucket3,                  // Total released on Day 2
    day5: day5Release,                                      // Total released on Day 5
    output,                                                 // Final amount released from each bucket
  };
};

// Example Usage
const buckets: BucketData = {
  bucket2: 5000,
  bucket7: 600,
  bucket6: 500,
  bucket3: 500,
};

const result = releaseBuckets(buckets);
console.log(result);
