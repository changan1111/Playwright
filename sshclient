import { Client } from 'ssh2';
import fs from 'fs';

export class SSHClient {
  private conn: Client;

  constructor() {
    this.conn = new Client();
  }

  // Connect using SSH with private key
  async connectSSH(host: string, username: string, privateKeyPath: string) {
    const privateKey = fs.readFileSync(privateKeyPath, 'utf-8');

    return new Promise<void>((resolve, reject) => {
      this.conn.on('ready', () => {
        console.log('SSH Connection ready');
        resolve();
      }).on('error', (err) => {
        console.error('SSH Connection error:', err);
        reject(err);
      }).connect({
        host,
        username,
        privateKey,
      });
    });
  }

  // Run multiple commands
  async runCommands(commands: string[]) {
    for (const command of commands) {
      await this.executeCommand(command);
    }
  }

  // Execute a single command via SSH
  private async executeCommand(command: string) {
    return new Promise<void>((resolve, reject) => {
      this.conn.exec(command, (err, stream) => {
        if (err) {
          console.error('Command execution error:', err);
          reject(err);
          return;
        }

        stream.on('close', () => {
          resolve();
        }).on('data', (data) => {
          console.log(`Output: ${data.toString()}`);
        }).stderr.on('data', (data) => {
          console.error(`Error: ${data.toString()}`);
        });
      });
    });
  }

  // Disconnect SSH connection
  disconnect() {
    this.conn.end();
    console.log('Disconnected from the server.');
  }
}

// Example usage:
(async () => {
  const sshClient = new SSHClient();
  const commands = ['ls -l', 'whoami', 'uptime'];

  try {
    // Connect to the SSH server
    await sshClient.connectSSH('your.remote.server', 'your-username', '/path/to/id_rsa');

    // Run the commands sequentially
    await sshClient.runCommands(commands);
  } catch (error) {
    console.error('Error:', error);
  } finally {
    // Disconnect from the server
    sshClient.disconnect();
  }
})();
